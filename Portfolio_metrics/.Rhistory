#0.8795310 * 0.04932383 * 0.04369052
#cov_weighted[1,2]
# sum up weighted covariance
sum_cov<-NULL
temp_sum_temp<-NULL
for (i in 1:(length(pop_contribution)-1)){
temp_sum<-sum(cov_weighted[i,(i+1):dim(cov_weighted)[2]])
temp_sum_temp[i]<-temp_sum
sum_cov<-sum(temp_sum_temp)
}
#### calculate sharpe ratio
Sharpe_ratio<-sharpe_return / sqrt((esu_var_total + sum_cov))
length(temp)
?matrix
SHARPES_LOO_V<-NULL
dim(abundance.log)
View(abundance.log)
dim(abundance.log)[2]
no.populations<-dim(abundance.log)[2]
SHARPES_LOO_V<-NULL
no.populations<-dim(abundance.log)[2]
#temp<-colnames(abundance.log)
for (i in 1:no.populations){
#name<-temp[i]
#temp_df<-dplyr::select(abundance.log, -paste(name))
temp_df<-abundance.log[,-i]
SHARPES_LOO_V[i]<-sum(temp_df)
}
SHARPES_LOO_V
dim(temp_df)
sharpes_loo<-function(df){
#### Calculate numerator of sharpe ratio
# calculate total ESU production 1994-2016
esu_totals<-rowSums(df)
esu_total<-sum(esu_totals)
# calculate total population production 1994-2016
pop_totals<-colSums(df)
# calculate population proportional contribution
pop_contribution<-pop_totals / esu_total
# mean per population from 1994-2016
pop_means<-colMeans(df)
# calculate weighted individual return
weighted_returns<-pop_contribution * pop_means
# sum all individual weighted returns for Up (return part of Sharpe Ratio)
sharpe_return<-sum(weighted_returns)
#### calculate denominator of sharpe ratio
pop_variance<-apply(df,2,var)
# calculate variance squared
pop_variance2<-pop_variance * pop_variance
# pop variance weighted contribution
pop_var_contribution<-pop_contribution * pop_contribution * pop_variance2
# get total esu variance
esu_var_total<-sum(pop_var_contribution)
# calculate covariance matrix
cov.mat<-cov(df)
# loop to calculate weighted covariance contribution per pair
cov_weighted<-matrix(9999, nrow=length(pop_contribution), ncol = length(pop_contribution))
for (i in 1:length(pop_contribution)){
for (j in 1:length(pop_contribution)){
out_temp<-cov.mat[i,j]
pair_temp<-out_temp * pop_contribution[i] * pop_contribution[j]
cov_weighted[i,j] <- pair_temp
}
}
## check weighted covariance contribution of each pair
#0.8795310 * 0.04932383 * 0.04369052
#cov_weighted[1,2]
# sum up weighted covariance
sum_cov<-NULL
temp_sum_temp<-NULL
for (i in 1:(length(pop_contribution)-1)){
temp_sum<-sum(cov_weighted[i,(i+1):dim(cov_weighted)[2]])
temp_sum_temp[i]<-temp_sum
sum_cov<-sum(temp_sum_temp)
}
#### calculate sharpe ratio
Sharpe_ratio<-sharpe_return / sqrt((esu_var_total + sum_cov))
return(sharpe_ratio)
}
sharpes_loo(abundance.log)
sharpes_loo<-function(df){
#### Calculate numerator of sharpe ratio
# calculate total ESU production 1994-2016
esu_totals<-rowSums(df)
esu_total<-sum(esu_totals)
# calculate total population production 1994-2016
pop_totals<-colSums(df)
# calculate population proportional contribution
pop_contribution<-pop_totals / esu_total
# mean per population from 1994-2016
pop_means<-colMeans(df)
# calculate weighted individual return
weighted_returns<-pop_contribution * pop_means
# sum all individual weighted returns for Up (return part of Sharpe Ratio)
sharpe_return<-sum(weighted_returns)
#### calculate denominator of sharpe ratio
pop_variance<-apply(df,2,var)
# calculate variance squared
pop_variance2<-pop_variance * pop_variance
# pop variance weighted contribution
pop_var_contribution<-pop_contribution * pop_contribution * pop_variance2
# get total esu variance
esu_var_total<-sum(pop_var_contribution)
# calculate covariance matrix
cov.mat<-cov(df)
# loop to calculate weighted covariance contribution per pair
cov_weighted<-matrix(9999, nrow=length(pop_contribution), ncol = length(pop_contribution))
for (i in 1:length(pop_contribution)){
for (j in 1:length(pop_contribution)){
out_temp<-cov.mat[i,j]
pair_temp<-out_temp * pop_contribution[i] * pop_contribution[j]
cov_weighted[i,j] <- pair_temp
}
}
## check weighted covariance contribution of each pair
#0.8795310 * 0.04932383 * 0.04369052
#cov_weighted[1,2]
# sum up weighted covariance
sum_cov<-NULL
temp_sum_temp<-NULL
for (i in 1:(length(pop_contribution)-1)){
temp_sum<-sum(cov_weighted[i,(i+1):dim(cov_weighted)[2]])
temp_sum_temp[i]<-temp_sum
sum_cov<-sum(temp_sum_temp)
}
#### calculate sharpe ratio
sharpe_ratio<-sharpe_return / sqrt((esu_var_total + sum_cov))
return(sharpe_ratio)
}
sharpes_loo(abundance.log)
Sharpe_ratio
#### Calculate numerator of sharpe ratio
# calculate total ESU production 1994-2016
esu_totals<-rowSums(abundance.log)
esu_total<-sum(esu_totals)
# calculate total population production 1994-2016
pop_totals<-colSums(abundance.log)
# calculate population proportional contribution
pop_contribution<-pop_totals / esu_total
# mean per population from 1994-2016
pop_means<-colMeans(abundance.log)
# calculate weighted individual return
weighted_returns<-pop_contribution * pop_means
# sum all individual weighted returns for Up (return part of Sharpe Ratio)
sharpe_return<-sum(weighted_returns)
#### calculate denominator of sharpe ratio
pop_variance<-apply(abundance.log,2,var)
# calculate variance squared
pop_variance2<-pop_variance * pop_variance
# pop variance weighted contribution
pop_var_contribution<-pop_contribution * pop_contribution * pop_variance2
# get total esu variance
esu_var_total<-sum(pop_var_contribution)
# calculate covariance matrix
cov.mat<-cov(abundance.log)
# loop to calculate weighted covariance contribution per pair
cov_weighted<-matrix(9999, nrow=length(pop_contribution), ncol = length(pop_contribution))
for (i in 1:length(pop_contribution)){
for (j in 1:length(pop_contribution)){
out_temp<-cov.mat[i,j]
pair_temp<-out_temp * pop_contribution[i] * pop_contribution[j]
cov_weighted[i,j] <- pair_temp
}
}
## check weighted covariance contribution of each pair
#0.8795310 * 0.04932383 * 0.04369052
#cov_weighted[1,2]
# sum up weighted covariance
sum_cov<-NULL
temp_sum_temp<-NULL
for (i in 1:(length(pop_contribution)-1)){
temp_sum<-sum(cov_weighted[i,(i+1):dim(cov_weighted)[2]])
temp_sum_temp[i]<-temp_sum
sum_cov<-sum(temp_sum_temp)
}
#### calculate sharpe ratio
Sharpe_ratio<-sharpe_return / sqrt((esu_var_total + sum_cov))
Sharpe_ratio
SHARPES_LOO_V<-NULL
no.populations<-dim(abundance.log)[2]
#temp<-colnames(abundance.log)
for (i in 1:no.populations){
temp_df<-abundance.log[,-i]
temp_out<-sharpes_loo(temp_df)
SHARPES_LOO_V[i]<-temp_out
}
SHARPES_LOO_V
pops_names<-colnames(abundance.log)
sharpes<-cbind(pops_names, SHARPES_LOO_V)
sharpes
sharpes<-data.frame(pops_names, SHARPES_LOO_V)
sharpes
pops_names
# drop lakes from dataframe
abundance.log2<-dplyr::select(abundance.log, -Tahkenitch, -Tenmile, -Siltcoos)
# create empty vector for results
SHARPES_LOO_V_lakes<-NULL
no.populations<-dim(abundance.log2)[2]
no.populations
# drop lakes from dataframe
abundance.log2<-dplyr::select(abundance.log, -Tahkenitch, -Tenmile, -Siltcoos)
# create empty vector for results
SHARPES_LOO_V_lakes<-NULL
no.populations<-dim(abundance.log2)[2]
#temp<-colnames(abundance.log)
for (i in 1:no.populations){
temp_df<-abundance.log2[,-i]
temp_out<-sharpes_loo(temp_df)
SHARPES_LOO_V_lakes[i]<-temp_out
}
SHARPES_LOO_V_lakes
# get population names
pops_names<-colnames(abundance.log2)
names(sharpes)
names(sharpes)
names(sharpes_no_lakes)
# drop lakes from dataframe
abundance.log2<-dplyr::select(abundance.log, -Tahkenitch, -Tenmile, -Siltcoos)
# create empty vector for results
SHARPES_LOO_V_lakes<-NULL
no.populations<-dim(abundance.log2)[2]
#temp<-colnames(abundance.log)
for (i in 1:no.populations){
temp_df<-abundance.log2[,-i]
temp_out<-sharpes_loo(temp_df)
SHARPES_LOO_V_lakes[i]<-temp_out
}
# get population names
pops_names<-colnames(abundance.log2)
sharpes_no_lakes<-data.frame(pops_names, SHARPES_LOO_V_lakes)
names(sharpes_no_lakes)
merge(sharpes, sharpes_no_lakes, by.x="pops_names", by.y="pops_names")
merge(sharpes, sharpes_no_lakes, by.x="pops_names", by.y="pops_names", all.x = TRUE)
all_sharpe<-merge(sharpes, sharpes_no_lakes, by.x="pops_names", by.y="pops_names", all.x = TRUE)
plot(SHARPES_LOO_V_lakes~SHARPES_LOO_V, data=all_sharpe)
plot(SHARPES_LOO_V_lakes~SHARPES_LOO_V, data=all_sharpe, pch=19, col="purple")
plot(SHARPES_LOO_V_lakes~SHARPES_LOO_V, data=all_sharpe, pch=19, col="purple", cex=2)
plot(SHARPES_LOO_V_lakes~SHARPES_LOO_V, data=all_sharpe, pch=19, col="purple", cex=2, xlab="Sharpe Ratio Leave One Out", ylab="Sharpe Ratio w/o Lakes")
abline=c(0,1)
plot(SHARPES_LOO_V_lakes~SHARPES_LOO_V, data=all_sharpe, pch=19, col="purple", cex=2, xlab="Sharpe Ratio Leave One Out", ylab="Sharpe Ratio w/o Lakes", xlim=c(11,15), ylim=c(11,15))
plot(SHARPES_LOO_V_lakes~SHARPES_LOO_V, data=all_sharpe, pch=19, col="purple", cex=2, xlab="Sharpe Ratio Leave One Out", ylab="Sharpe Ratio w/o Lakes", xlim=c(12,15), ylim=c(12,15))
plot(SHARPES_LOO_V_lakes~SHARPES_LOO_V, data=all_sharpe, pch=19, col="purple", cex=2, xlab="Sharpe Ratio Leave One Out", ylab="Sharpe Ratio w/o Lakes", xlim=c(12,14.5), ylim=c(12,14.5))
plot(SHARPES_LOO_V_lakes~SHARPES_LOO_V, data=all_sharpe, pch=19, col="purple", cex=2, xlab="Sharpe Ratio Leave One Out", ylab="Sharpe Ratio w/o Lakes", xlim=c(11.5,14.5), ylim=c(11.5,14.5))
abline(0,1)
?abline
abline(0,1, col="blue")
plot(SHARPES_LOO_V_lakes~SHARPES_LOO_V, data=all_sharpe, pch=19, col="purple", cex=2, xlab="Sharpe Ratio Leave One Out", ylab="Sharpe Ratio w/o Lakes")
abline(0,1, col="blue")
AbundanceGroups <- read.csv("E:/Resiliency/Matt's Work/Data/Spreadsheets/AbundanceGroups.csv")
View(AbundanceGroups)
AbundanceGroups
merge(all_sharpe, AbundanceGroups, by.x="pops_names", by.y="Population")
all_sharpe_stratum<-merge(all_sharpe, AbundanceGroups, by.x="pops_names", by.y="Population")
apr<-ggplot(data=all_sharpe_stratum,
aes(x=SHARPES_LOO_V, y=SHARPES_LOO_V_lakes, colour=Stratum)) +
geom_point()
library(ggplot2)
apr<-ggplot(data=all_sharpe_stratum,
aes(x=SHARPES_LOO_V, y=SHARPES_LOO_V_lakes, colour=Stratum)) +
geom_point()
apr + labs(title="April SST", x="Year")
apr<-ggplot(data=all_sharpe_stratum,
aes(x=SHARPES_LOO_V, y=SHARPES_LOO_V_lakes, colour=Stratum)) +
geom_point()
apr + labs(title="Sharpe ratio comparison", x="Sharpe Ratio Leave One Out", y="Sharpe Ratio w/o Lakes")
apr<-ggplot(data=all_sharpe_stratum,
aes(x=SHARPES_LOO_V, y=SHARPES_LOO_V_lakes, colour=Stratum)) +
geom_point(size=3)
apr + labs(title="Sharpe ratio comparison", x="Sharpe Ratio Leave One Out", y="Sharpe Ratio w/o Lakes")
pop_variance
write.csv(all_sharpe_stratum, "all_sharpe_stratum.csv")
write.csv(all_sharpe_stratum, "all_sharpe_stratum.csv")
dir()
write.csv(all_sharpe_stratum, "all_sharpe_stratum.csv")
abundance.log
esu_totals
esu_total<-sum(esu_totals)
esu_total
# calculate total population production 1994-2016
pop_totals<-colSums(abundance.log)
pop_totals
# calculate population proportional contribution
pop_contribution<-pop_totals / esu_total
pop_contribution
sum(pop_contribution)
# mean per population from 1994-2016
pop_means<-colMeans(abundance.log)
pop_means
# calculate weighted individual return
weighted_returns<-pop_contribution * pop_means
weighted_returns
sharpe_return
?var
?apply
abundance.log
?cov
cov.mat
cov.mat2<-cov(abundance.log, abundance.log)
cov.mat
cov.mat2
head(cov.mat)
head(cov.mat2)
COV<- function(x,y) {
if(length(x)!=length(y)) {stop('x must have the same length as y ')}
x.bar <- mean(x)
y.bar <- mean(y)
N <- length(x)
Cov <- (sum((x-x.bar)*(y-y.bar))) / (N-1)
return(Cov)
}
COV(abundance.log, abundance.log)
COV(abundance.log$Alsea, abundance.log$Beaver)
COV<- function(x,y) {
if(length(x)!=length(y)) {stop('x must have the same length as y ')}
x.bar <- mean(x)
y.bar <- mean(y)
N <- length(x)
Cov <- (sum((x-x.bar)*(y-y.bar))) / (N)
return(Cov)
}
COV(abundance.log$Alsea, abundance.log$Beaver)
COV(abundance.log$Alsea, abundance.log$Coos)
cov.pop <- function(x,y=NULL) {
cov(x,y)*(NROW(x)-1)/NROW(x)
}
cov.pop(abundance.log)
COV(abundance.log$Alsea, abundance.log$Coos)
abundance.log
dim(abundance.log)
# calculate covariance matrix
cov.mat<-cov.pop(abundance.log)
esu_totals<-rowSums(abundance.log)
esu_total<-sum(esu_totals)
# calculate total population production 1994-2016
pop_totals<-colSums(abundance.log)
# calculate population proportional contribution
pop_contribution<-pop_totals / esu_total
# mean per population from 1994-2016
pop_means<-colMeans(abundance.log)
# calculate weighted individual return
weighted_returns<-pop_contribution * pop_means
# sum all individual weighted returns for Up (return part of Sharpe Ratio)
sharpe_return<-sum(weighted_returns)
#### calculate denominator of sharpe ratio
# calculate variance per population, 2 represents axis(columns)
pop_variance<-apply(abundance.log,2,var)
# calculate variance squared
#pop_variance2<-pop_variance * pop_variance
# pop variance weighted contribution
pop_var_contribution<-pop_contribution * pop_contribution * pop_variance
# get total esu variance
esu_var_total<-sum(pop_var_contribution)
# function to convert covariance from sample (n-1) to population(n)
cov.pop <- function(x,y=NULL) {
cov(x,y)*(NROW(x)-1)/NROW(x)
}
# calculate covariance matrix
cov.mat<-cov.pop(abundance.log)
pop_contribution
cov.mat
cov_weighted<-matrix(9999, nrow=length(pop_contribution), ncol = length(pop_contribution))
for (i in 1:length(pop_contribution)){
for (j in 1:length(pop_contribution)){
out_temp<-cov.mat[i,j]
pair_temp<-out_temp * pop_contribution[i] * pop_contribution[j]
cov_weighted[i,j] <- pair_temp
}
}
cov_weighted
head(cov_weighted)
pop_contribution
pop_totals
dir()
setwd("E:/Resiliency/Marcia/Data/Portfolio_metrics")
write.csv(abundance.log, "abundance.log.csv")
all_sharpe_stratum
all<-ggplot(data=all_sharpe_stratum, aes(pops_names, SHARPES_LOO_V, , colour=Stratum)) +geom_point(size=3)
all<-ggplot(data=all_sharpe_stratum, aes(pops_names, SHARPES_LOO_V, colour=Stratum)) +geom_point(size=3)
all
all<-ggplot(data=all_sharpe_stratum, aes(pops_names, SHARPES_LOO_V, colour=Stratum)) +geom_point(size=3)
all + labs(title="Sharpe Ratios", x="Population", y="Sharpe Ratio") +
theme(axis.title.x=element_text(angle=90))
all<-ggplot(data=all_sharpe_stratum, aes(pops_names, SHARPES_LOO_V, colour=Stratum)) +geom_point(size=3)
all + labs(title="Sharpe Ratios", x="Population", y="Sharpe Ratio") +
theme(axis.text.x=element_text(angle=90))
?mapply
mapply(CV, abundance.log)
CV <- function(x) {sd(x) / mean(x)}
mapply(CV, abundance.log)
# create empty vector for results
CV_LOO_V<-NULL
no.populations<-dim(abundance.log2)[2]
#temp<-colnames(abundance.log)
for (i in 1:no.populations){
temp_df<-abundance.log2[,-i]
temp_out<-CV(temp_df)
CV_LOO_V[i]<-temp_out
}
abundance.log2
dim(abundance.log2)
abundance.log2
temp_df
mean(CV_pops)
CV_pops<-mapply(CV, abundance.log)
mean(CV_pops)
CV_mean_ind<-mean(CV_pops)
CV(abundance.log)
as.vector(as.matrix(abundance.log)
)
CV(abundance.log.v)
# convert df of abundance to vector
abundance.log.v<-as.vector(as.matrix(abundance.log))
CV(abundance.log.v)
CV_mean_ind
abundance
# get CV for each population
CV_pops<-mapply(CV, abundance)
# calculate mean CV for total from mean of ind CV
CV_mean_ind<-mean(CV_pops)
# convert df of abundance to vector
abundance.v<-as.vector(as.matrix(abundance))
CV(abundance.v)
CV_mean_ind
# get CV for each population
CV_pops<-mapply(CV, abundance)
# calculate mean CV for total from mean of ind CV
CV_mean_ind<-mean(CV_pops)
CV_mean_ind
# convert df of abundance to vector
abundance.v<-as.vector(as.matrix(abundance))
CV_total<-CV(abundance.v)
# get population names
pops_names<-colnames(abundance)
pops_names
# drop year column
abundance<-dplyr::select(abundance, -Year)
# get CV for each population
CV_pops<-mapply(CV, abundance)
# calculate mean CV for total from mean of ind CV
CV_mean_ind<-mean(CV_pops)
CV_mean_ind
# convert df of abundance to vector
abundance.v<-as.vector(as.matrix(abundance))
CV_total<-CV(abundance.v)
# get population names
pops_names<-colnames(abundance)
CV_total
abundance
CV_pops
CV_all<-data.frame(pops_names, CV_pops)
CV_all
all<-ggplot(data=all_sharpe_stratum, aes(pops_names, CV_pops, colour=Stratum)) +geom_point(size=3)
all + labs(title="CV", x="Population", y="CV") +
theme(axis.text.x=element_text(angle=90))
all<-ggplot(data=all_sharpe_stratum, aes(pops_names, CV_pops, colour=Stratum)) +geom_point(size=3)
all + labs(x="Population", y="CV") +
theme(axis.text.x=element_text(angle=90))
# drop lakes from dataframe
abundance.lakes<-dplyr::select(abundance, -Tahkenitch, -Tenmile, -Siltcoos)
abundance.lakes
# drop lakes from dataframe
abundance.lakes<-dplyr::select(abundance, -Tahkenitch, -Tenmile, -Siltcoos)
# get CV for each population
CV_pops_lakes<-mapply(CV, abundance.lakes)
# calculate mean CV for total from mean of ind CV
CV_mean_ind_lakes<-mean(CV_pops_lakes)
CV_mean_ind_lakes
# convert df of abundance to vector
abundance.v.lakes<-as.vector(as.matrix(abundance.lakes))
CV_total_lakes<-CV(abundance.v.lakes)
# get population names
pops_names<-colnames(abundance)
CV_all_lakes<-data.frame(pops_names, CV_pops)
all<-ggplot(data=CV_all, aes(pops_names, CV_pops, colour=Stratum)) +geom_point(size=3)
all + labs(x="Population", y="CV") +
theme(axis.text.x=element_text(angle=90))
all_CV_stratum<-merge(CV_all, AbundanceGroups, by.x="pops_names", by.y="Population")
all_CV_stratum
all<-ggplot(data=all_CV_stratum, aes(pops_names, CV_pops, colour=Stratum)) +geom_point(size=3)
all + labs(x="Population", y="CV") +
theme(axis.text.x=element_text(angle=90))
CV_all_lakes
CV_all_lakes
colnames(CV_all_lakes)<-c("pops_names", "CV_lakes")
colnames(CV_all_lakes)
# merge with CV and stratum
CV_out<-merge(all_CV_stratum, CV_all_lakes, by.x="pops_names", by.y="pops_names", all=TRUE)
CV_out
abundance.lakes
# get CV for each population
CV_pops_lakes<-mapply(CV, abundance.lakes)
CV_pops_lakes
# calculate mean CV for total from mean of ind CV
CV_mean_ind_lakes<-mean(CV_pops_lakes)
CV_mean_ind_lakes
# convert df of abundance to vector
abundance.v.lakes<-as.vector(as.matrix(abundance.lakes))
CV_total_lakes<-CV(abundance.v.lakes)
# get population names
pops_names<-colnames(abundance)
pops_names
# get population names
pops_names<-colnames(abundance.lakes)
pops_names
CV_mean_ind_lakes
CV_pops_lakes
CV_all_lakes<-data.frame(pops_names, CV_pops_lakes)
CV_all_lakes
# merge with CV and stratum
CV_out<-merge(all_CV_stratum, CV_all_lakes, by.x="pops_names", by.y="pops_names", all=TRUE)
CV_out
all<-ggplot(data=all_CV_stratum, aes(pops_names, CV_pops, colour=Stratum)) +geom_point(size=3)
