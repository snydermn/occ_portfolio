theme_minimal() +
theme(axis.text.x  = element_text(angle=45, vjust=0.5, size=14),
axis.title.y = element_text(face="bold", colour="#990000", size=16)) + scale_y_continuous(name="PC2 Loadings")
loadings_20p$PC2_neg<-loadings_20p$PC2 * -1
# barplot with ggplot of loadings on PC2
p <-ggplot(loadings_20p, aes(x=rownames(loadings_20p), y=PC2_neg))
p +geom_bar(stat = "identity", fill="steelblue") +
theme_minimal() +
theme(axis.text.x  = element_text(angle=45, vjust=0.5, size=14),
axis.title.y = element_text(face="bold", colour="#990000", size=16)) +  scale_y_continuous(name="PC2 Loadings")
biplot(pca_4_plot_subset,  xlabs=data5[,1],  xlim=c(-0.5,0.5), cex=0.75)
# reverse direction of sign so that positive value indicates positive correlation with Sharpes
loadings_20p2$PC2_neg<-loadings_20p2$PC2*-1
# barplot with ggplot of loadings on PC2
p <-ggplot(loadings_20p2, aes(x=rownames(loadings_20p2), y=PC2_neg))
p +geom_bar(stat = "identity", fill="steelblue") +
theme_minimal() +
theme(axis.text.x  = element_text(angle=45, vjust=0.5, size=14),
axis.title.y = element_text(face="bold", colour="#990000", size=16)) + scale_y_continuous(name="PC2 or PC3 Loadings >abs(0.2)")
loadings_20p$PC2_neg<-loadings_20p$PC2 * -1
# barplot with ggplot of loadings on PC2
p <-ggplot(loadings_20p, aes(x=rownames(loadings_20p), y=PC2_neg))
p +geom_bar(stat = "identity", fill="steelblue") +
theme_minimal() +
theme(axis.text.x  = element_text(angle=45, vjust=0.5, size=14),
axis.title.y = element_text(face="bold", colour="#990000", size=16)) +  scale_y_continuous(name="PC2 Loadings >abs(0.2)")
pca_4_plot_subset<-pca_4_plot
pca_4_plot_subset$rotation<-pca_4_plot_subset$rotation[which(abs(pca_4_plot_subset$rotation[,3])>0.2 | abs(pca_4_plot_subset$rotation[,2])>0.2)  ,]
biplot(pca_4_plot_subset,  xlabs=data5[,1],  xlim=c(-0.5,0.5), cex=0.75)
png("score_biplot_subset.png", units="in", height=8, width=8, res=96)
biplot(pca_4_plot_subset,  xlabs=data5[,1],  xlim=c(-0.5,0.5), cex=0.75)
dev.off()
pdf("score_biplot_subset_pc3_pc2.pdf",  height=8, width=8)
biplot(pca_4_plot_subset,  xlabs=data5[,1],  xlim=c(-0.5,0.5), cex=0.75)
dev.off()
dev.off()
biplot(pca_4_plot_subset,  xlabs=data5[,1],  xlim=c(-0.5,0.5), cex=0.75)
# loading >0.2 PC1
loadings_20p_PC1<-loadings[which(abs(loadings$PC1) >0.2), ]
# reverse direction of sign so that positive value indicates positive correlation with Sharpes
loadings_20p_PC1$PC1_neg<-loadings_20p_PC1$PC1*-1
# reverse direction of sign so that positive value indicates positive correlation with Sharpes
loadings_20p_PC1$PC1_neg<-loadings_20p_PC1$PC1*-1
# barplot with ggplot of loadings on PC2
p <-ggplot(loadings_20p_PC1, aes(x=rownames(loadings_20p_PC1), y=PC1_neg))
p +geom_bar(stat = "identity", fill="steelblue") +
theme_minimal() +
theme(axis.text.x  = element_text(angle=45, vjust=0.5, size=14),
axis.title.y = element_text(face="bold", colour="#990000", size=16)) + scale_y_continuous(name="PC1 >abs(0.2)")
names(metrics)
ggplot(metrics, aes(x=pops_names, y = DD))+
geom_point()
ggplot(metrics, aes(x=pops_names, y = DD))+
geom_point()+
theme(axis.text.x  = element_text(angle=45, vjust=0.5, size=14))
ggplot(metrics, aes(x=pops_names, y = DD))+
geom_point()+
theme(axis.text.x  = element_text(angle=45, vjust=0.5, size=14))+
xlab(" ")
ggplot(metrics, aes(x=pops_names, y = DD))+
geom_point()+
theme(axis.text.x  = element_text(angle=45, vjust=0.5, size=14))+
xlab(" ")+
theme_classic()
ggplot(metrics, aes(x=pops_names, y = DD))+
geom_point()+
theme_classic()+
theme(axis.text.x  = element_text(angle=45, vjust=0.5, size=14))+
xlab(" ")+
ggplot(metrics, aes(x=pops_names, y = DD))+
geom_point()+
theme_classic()+
theme(axis.text.x  = element_text(angle=45, vjust=0.5, size=14))+
xlab(" ")
ggplot(metrics, aes(x=pops_names, y = DD))+
geom_point()+
theme_classic()+
theme(axis.text.x  = element_text(angle=45, vjust=0.5, size=14))+
xlab(" ")
names(metrics)
ggplot(metrics, aes(x=pops_names, y = CVCurrent_LOO_V))+
geom_point()+
theme_classic()+
theme(axis.text.x  = element_text(angle=45, vjust=0.5, size=14))+
xlab(" ")
ggplot(metrics, aes(x=pops_names, y = CVCurrent_LOO_V))+
geom_point()+
theme_classic()+
theme(axis.text.x  = element_text(angle=45, vjust=0.5, size=14))+
xlab(" ")
ggplot(metrics, aes(x=pops_names, y = CVCurrent_LOO_V))+
geom_point()+
theme_classic()+
theme(axis.text.x  = element_text(angle=45, vjust=0.5, size=14))+
xlab(" ")+
ylab(CV)
ggplot(metrics, aes(x=pops_names, y = DD))+
geom_point()+
theme_classic()+
theme(axis.text.x  = element_text(angle=45, vjust=0.5, size=14))+
xlab(" ")
ggplot(metrics, aes(x=pops_names, y = CVCurrent_LOO_V))+
geom_point()+
theme_classic()+
theme(axis.text.x  = element_text(angle=45, vjust=0.5, size=14))+
xlab(" ")+
ylab("CV")
# loadings can be accessed with $rotation
pca_test$rotation # pca loading value used in linear equation to calculate score
# pca
pca_test<-prcomp(landscape_z, scale=FALSE)
# loadings can be accessed with $rotation
#pca_test$rotation # pca loading value used in linear equation to calculate score
#pca_test$x # pca scores
# test signifciance of eigen values a different way
#ordi.monte(data4,ord='pca',dim=3)
#ordi.scree(pca_test,ord='pca')
screeplot(pca_test)
fviz_eig(pca_test)
fviz_pca_ind(pca_test,
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
fviz_pca_biplot(pca_test, repel = TRUE,
col.var = "#2E9FDF", # Variables color
col.ind = "#696969"  # Individuals color
)
eig.val <- get_eigenvalue(pca_test)
eig.val
get_pca_var(pca_test)
res.var <- get_pca_var(pca_test)
res.var$contrib        # Contributions to the PCs
#res.var$coord          # Coordinates
#res.var$cos2
# pca
pca_test<-prcomp(landscape_z, scale=FALSE)
# loadings can be accessed with $rotation
#pca_test$rotation # pca loading value used in linear equation to calculate score
#pca_test$x # pca scores
# test signifciance of eigen values a different way
#ordi.monte(data4,ord='pca',dim=3)
#ordi.scree(pca_test,ord='pca')
screeplot(pca_test)
fviz_eig(pca_test)
fviz_pca_ind(pca_test,
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
fviz_pca_biplot(pca_test, repel = TRUE,
col.var = "#2E9FDF", # Variables color
col.ind = "#696969"  # Individuals color
)
eig.val <- get_eigenvalue(pca_test)
eig.val
get_pca_var(pca_test)
res.var <- get_pca_var(pca_test)
res.var$contrib        # Contributions to the PCs
#res.var$coord          # Coordinates
#res.var$cos2
# pca
pca_test<-prcomp(landscape_z, scale=FALSE)
# loadings can be accessed with $rotation
#pca_test$rotation # pca loading value used in linear equation to calculate score
#pca_test$x # pca scores
# test signifciance of eigen values a different way
#ordi.monte(data4,ord='pca',dim=3)
#ordi.scree(pca_test,ord='pca')
screeplot(pca_test)
fviz_eig(pca_test)
fviz_pca_ind(pca_test,
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
fviz_pca_biplot(pca_test, repel = TRUE,
col.var = "#2E9FDF", # Variables color
col.ind = "#696969"  # Individuals color
)
eig.val <- get_eigenvalue(pca_test)
eig.val
get_pca_var(pca_test)
res.var <- get_pca_var(pca_test)
setwd("C:/Users/snyde/git_repo/occ_portfolio/Portfolio_metrics/Results")
# import portfolio measurements
metrics <- read.csv("C:/Users/snyde/Dropbox/Resiliency/Marcia/Data/Portfolio_metrics/DD_metric_nolakes031721.csv")
# drop first column
metrics <- metrics[,-1]
metrics
View(metrics)
# import portfolio measurements
metrics <- read.csv("C:/Users/snyde/Dropbox/Resiliency/Marcia/Data/Portfolio_metrics/DD_metric_nolakes031721.csv")
View(metrics)
# drop first column
metrics <- metrics[,-1]
# import watershed metrics
CohoDataSummary <- read_csv("C:/Users/snyde/Dropbox/Resiliency/Marcia/Data/watershed_metrics021621.csv")
View(CohoDataSummary)
# import watershed metrics
CohoDataSummary <- read_csv("C:/Users/snyde/Dropbox/Resiliency/Marcia/Data/watershed_metrics021621.csv")
# drop first column
CohoDataSummary <- CohoDataSummary[,-1]
View(CohoDataSummary)
View(CohoDataSummary)
names(CohoDataSummary)
unique(CohoDataSummary$PopulationLong)
# drop lake data
CohoDataSummary <- filter(CohoDataSummary, PopulationLong != "Siltcoos River (Lake)" | PopulationLong != "Tenmile Lake" | PopulationLong != "Tahkenitch Lake")
unique(CohoDataSummary$PopulationLong)
View(CohoDataSummary)
# drop lake data
CohoDataSummary <- filter(CohoDataSummary, PopulationLong != "Siltcoos River (Lake)" & PopulationLong != "Tenmile Lake" & PopulationLong != "Tahkenitch Lake")
View(CohoDataSummary)
landscape_raw<-CohoDataSummary[,4:dim(CohoDataSummary)[2]] # drop first 3 columns because character
cor_matrix<-cor(landscape_raw, method="spearman")
#write.csv(cor_matrix,"cor_matrix.csv")
View(landscape_raw)
CohoDataSummary$Population
dim(landscape_z)
dim(landscape_raw)
landscape_raw<-CohoDataSummary[,4:dim(CohoDataSummary)[2]] # drop first 3 columns because character
cor_matrix<-cor(landscape_raw, method="spearman")
dim(landscape)
landscape<-dplyr::select(landscape_raw, -HighCritHab_m, -HighCritHab_p,-MeanElev_m,
-HighIP_m, -Watershed_sqkm, -HighIP_p, -Public_sqkm,
-lake_area_km2, -est_area_km2, -wetland_area_km2,
-LowGradient_m, -LogDriveLength_m, -Latitude)
dim(landscape)
# need to scale and center data
landscape_z<-scale(landscape, scale=TRUE, center=TRUE)
dim(landscape_z)
# pca
pca_test<-prcomp(landscape_z, scale=FALSE)
# loadings can be accessed with $rotation
#pca_test$rotation # pca loading value used in linear equation to calculate score
#pca_test$x # pca scores
# test signifciance of eigen values a different way
#ordi.monte(data4,ord='pca',dim=3)
#ordi.scree(pca_test,ord='pca')
screeplot(pca_test)
fviz_eig(pca_test)
#fviz_pca_ind(pca_test,
#             col.ind = "cos2", # Color by the quality of representation
#             gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
#             repel = TRUE     # Avoid text overlapping
#             )
fviz_pca_biplot(pca_test, repel = TRUE,
col.var = "#2E9FDF", # Variables color
col.ind = "#696969"  # Individuals color
)
eig.val <- get_eigenvalue(pca_test)
eig.val
get_pca_var(pca_test)
res.var <- get_pca_var(pca_test)
#res.var$contrib        # Contributions to the PCs
#res.var$coord          # Coordinates
#res.var$cos2
fviz_eig
fviz_eig(pca_test)
eig.val
#biplot(pca_test)
landscape_z_df<-as.data.frame(landscape_z) # convert matrix to dataframe
data5<-cbind(CohoDataSummary$Population, landscape_z_df) # add population column
data5
#colnames(data5)[1]<-"Population" # rename population column
pca_4_plot<-prcomp(data5[,2:dim(data5)[2]], scale=FALSE)
biplot(pca_4_plot, xlabs=data5[,1],  xlim=c(-0.5,0.5), cex=0.75)
biplot(pca_4_plot,  xlabs=rep("", 21),  xlim=c(-0.5,0.5), cex=0.75)
# subset biplot
PC1<-pca_test$rotation[,1]
PC2<-pca_test$rotation[,2]
PC3<-pca_test$rotation[,3]
loadings<-as.data.frame(cbind(PC1, PC2, PC3))
write.csv(loadings, "C:/Users/snyde/Dropbox/Resiliency/Marcia/Data/Portfolio_metrics/loadings.csv")
knitr::opts_chunk$set(echo = FALSE)
library(readr)
library(vegan)
library(BiodiversityR)
library(knitr)
library(dplyr)
library(reshape2)
library(ggplot2)
library(MASS)
library(data.table)
library(factoextra)
setwd("C:/Users/snyde/git_repo/occ_portfolio/Portfolio_metrics/Results")
# import portfolio measurements
metrics <- read.csv("C:/Users/snyde/Dropbox/Resiliency/Marcia/Data/Portfolio_metrics/DD_metric_nolakes031721.csv")
# drop first column
metrics <- metrics[,-1]
# import watershed metrics
CohoDataSummary <- read_csv("C:/Users/snyde/Dropbox/Resiliency/Marcia/Data/watershed_metrics021621.csv")
# drop first column
CohoDataSummary <- CohoDataSummary[,-1]
# drop lake data
CohoDataSummary <- filter(CohoDataSummary, PopulationLong != "Siltcoos River (Lake)" & PopulationLong != "Tenmile Lake" & PopulationLong != "Tahkenitch Lake")
landscape_raw<-CohoDataSummary[,4:dim(CohoDataSummary)[2]] # drop first 3 columns because character
cor_matrix<-cor(landscape_raw, method="spearman")
#write.csv(cor_matrix,"cor_matrix.csv")
# subset metrics
landscape<-dplyr::select(landscape_raw, -HighCritHab_m, -HighCritHab_p,-MeanElev_m,
-HighIP_m, -Watershed_sqkm, -HighIP_p, -Public_sqkm,
-lake_area_km2, -est_area_km2, -wetland_area_km2,
-LowGradient_m, -LogDriveLength_m, -Latitude)
# need to scale and center data
landscape_z<-scale(landscape, scale=TRUE, center=TRUE)
# pca
pca_test<-prcomp(landscape_z, scale=FALSE)
# loadings can be accessed with $rotation
#pca_test$rotation # pca loading value used in linear equation to calculate score
#pca_test$x # pca scores
# test signifciance of eigen values a different way
#ordi.monte(data4,ord='pca',dim=3)
#ordi.scree(pca_test,ord='pca')
screeplot(pca_test)
fviz_eig(pca_test)
#fviz_pca_ind(pca_test,
#             col.ind = "cos2", # Color by the quality of representation
#             gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
#             repel = TRUE     # Avoid text overlapping
#             )
fviz_pca_biplot(pca_test, repel = TRUE,
col.var = "#2E9FDF", # Variables color
col.ind = "#696969"  # Individuals color
)
eig.val <- get_eigenvalue(pca_test)
eig.val
get_pca_var(pca_test)
res.var <- get_pca_var(pca_test)
#res.var$contrib        # Contributions to the PCs
#res.var$coord          # Coordinates
#res.var$cos2
#biplot(pca_test)
landscape_z_df<-as.data.frame(landscape_z) # convert matrix to dataframe
data5<-cbind(CohoDataSummary$Population, landscape_z_df) # add population column
#colnames(data5)[1]<-"Population" # rename population column
pca_4_plot<-prcomp(data5[,2:dim(data5)[2]], scale=FALSE)
biplot(pca_4_plot, xlabs=data5[,1],  xlim=c(-0.5,0.5), cex=0.75)
biplot(pca_4_plot,  xlabs=rep("", 21),  xlim=c(-0.5,0.5), cex=0.75)
# subset biplot
PC1<-pca_test$rotation[,1]
PC2<-pca_test$rotation[,2]
PC3<-pca_test$rotation[,3]
loadings<-as.data.frame(cbind(PC1, PC2, PC3))
write.csv(loadings, "C:/Users/snyde/Dropbox/Resiliency/Marcia/Data/Portfolio_metrics/loadings_nolakes.csv")
#biplot(pca_test)
landscape_z_df<-as.data.frame(landscape_z) # convert matrix to dataframe
data5<-cbind(CohoDataSummary$Population, landscape_z_df) # add population column
#colnames(data5)[1]<-"Population" # rename population column
pca_4_plot<-prcomp(data5[,2:dim(data5)[2]], scale=FALSE)
biplot(pca_4_plot, xlabs=data5[,1],  xlim=c(-0.5,0.5), cex=0.75)
biplot(pca_4_plot,  xlabs=rep("", 18),  xlim=c(-0.5,0.5), cex=0.75)
# subset biplot
PC1<-pca_test$rotation[,1]
PC2<-pca_test$rotation[,2]
PC3<-pca_test$rotation[,3]
loadings<-as.data.frame(cbind(PC1, PC2, PC3))
write.csv(loadings, "C:/Users/snyde/Dropbox/Resiliency/Marcia/Data/Portfolio_metrics/loadings_nolakes.csv")
# biplot loadings >0.2 PC2
loadings_20p<-loadings[which(abs(loadings$PC2) >0.2), ]
loadings_20p_pc3<-loadings[which(abs(loadings$PC3) >0.2), ]
# biplot loadings >0.2 PC2 or PC3
loadings_20p2<-loadings[which(abs(loadings$PC2) >0.2 | abs(loadings$PC3) >0.2), ]
# loading >0.2 PC1
loadings_20p_PC1<-loadings[which(abs(loadings$PC1) >0.2), ]
plot(PC2~PC1, data=loadings_20p, type='n', xlim=c(-0.4, 0.4), ylim=c(-0.4, 0.4))
text(loadings_20p$PC1,loadings_20p$PC2,label=row.names(loadings_20p),col='blue', pos=c(1,1,1,1,1,1,1,2,4,1 ))
png("score_biplot_GT2_PC2PC3.png", units="in", height=5, width=5, res=96)
pc2_pc2_gt0.2 <- plot(PC3~PC2, data=loadings_20p2, type='n', xlim=c(-0.5, 0.4), ylim=c(-0.4, 0.4))
text(loadings_20p2$PC2,loadings_20p2$PC3,label=row.names(loadings_20p2),col='blue', pos=c(1,1,1,4,1,1,1,4,1,2,1,4,1,2,4,3 ))
pc2_pc2_gt0.2
dev.off()
pc2_pc2_gt0.2
### 1 = below
### 2 = left
### 3 = above
### 4 = right
pca_4_plot_subset<-pca_4_plot
pca_4_plot_subset$rotation<-pca_4_plot_subset$rotation[which(abs(pca_4_plot_subset$rotation[,2])>0.2 | abs(pca_4_plot_subset$rotation[,1])>0.2)  ,]
biplot(pca_4_plot_subset,  xlabs=data5[,1],  xlim=c(-0.5,0.5), cex=0.75)
png("score_biplot_subset_nolakes.png", units="in", height=8, width=8, res=96)
biplot(pca_4_plot_subset,  xlabs=data5[,1],  xlim=c(-0.5,0.5), cex=0.75)
dev.off()
pdf("score_biplot_subset.pdf",  height=8, width=8)
biplot(pca_4_plot_subset,  xlabs=data5[,1],  xlim=c(-0.5,0.5), cex=0.75)
dev.off()
pca_4_plot_subset<-pca_4_plot
pca_4_plot_subset$rotation<-pca_4_plot_subset$rotation[which(abs(pca_4_plot_subset$rotation[,3])>0.2 | abs(pca_4_plot_subset$rotation[,2])>0.2)  ,]
biplot(pca_4_plot_subset,  xlabs=data5[,1],  xlim=c(-0.5,0.5), cex=0.75)
png("score_biplot_subset_nolakes.png", units="in", height=8, width=8, res=96)
biplot(pca_4_plot_subset,  xlabs=data5[,1],  xlim=c(-0.5,0.5), cex=0.75)
dev.off()
pdf("score_biplot_subset_pc3_pc2_nolakes.pdf",  height=8, width=8)
biplot(pca_4_plot_subset,  xlabs=data5[,1],  xlim=c(-0.5,0.5), cex=0.75)
dev.off()
# reverse direction of sign so that positive value indicates positive correlation with Sharpes
loadings_20p_PC1$PC1_neg<-loadings_20p_PC1$PC1*1
# barplot with ggplot of loadings on PC2
p <-ggplot(loadings_20p_PC1, aes(x=rownames(loadings_20p_PC1), y=PC1_neg))
p +geom_bar(stat = "identity", fill="steelblue") +
theme_minimal() +
theme(axis.text.x  = element_text(angle=45, vjust=0.5, size=14),
axis.title.y = element_text(face="bold", colour="#990000", size=16)) + scale_y_continuous(name="PC1 >abs(0.2)")
# reverse direction of sign so that positive value indicates positive correlation with Sharpes
loadings_20p2$PC2_neg<-loadings_20p2$PC2*1
# barplot with ggplot of loadings on PC2
p <-ggplot(loadings_20p2, aes(x=rownames(loadings_20p2), y=PC2_neg))
p +geom_bar(stat = "identity", fill="steelblue") +
theme_minimal() +
theme(axis.text.x  = element_text(angle=45, vjust=0.5, size=14),
axis.title.y = element_text(face="bold", colour="#990000", size=16)) + scale_y_continuous(name="PC2 or PC3 Loadings >abs(0.2)")
loadings_20p$PC2_neg<-loadings_20p$PC2 * 1
# barplot with ggplot of loadings on PC2
p <-ggplot(loadings_20p, aes(x=rownames(loadings_20p), y=PC2_neg))
p +geom_bar(stat = "identity", fill="steelblue") +
theme_minimal() +
theme(axis.text.x  = element_text(angle=45, vjust=0.5, size=14),
axis.title.y = element_text(face="bold", colour="#990000", size=16)) +  scale_y_continuous(name="PC2 Loadings >abs(0.2)")
loadings_20p_pc3$PC3_neg<-loadings_20p_pc3$PC3 * 1
# barplot with ggplot of loadings on PC2
p <-ggplot(loadings_20p_pc3, aes(x=rownames(loadings_20p_pc3), y=PC3_neg))
p +geom_bar(stat = "identity", fill="steelblue") +
theme_minimal() +
theme(axis.text.x  = element_text(angle=45, vjust=0.5, size=14),
axis.title.y = element_text(face="bold", colour="#990000", size=16))+  scale_y_continuous(name="PC3 Loadings >abs(0.2)")
# grab principal component scores for significant components
pc1<-pca_test$x[1:21,1]
pc2<-pca_test$x[1:21,2]
pc3<-pca_test$x[1:21,3]
#class(pc1)
data_pca<-cbind(data5,pc1, pc2, pc3)
#View(OC_COHO_SharpeRatio_CV)
data_pca2<-merge(metrics, data_pca, by.x="pops_names", by.y="CohoDataSummary$Population")
write.csv(data_pca2, "PCA_metrics_scores_031721.csv")
# grab principal component scores for significant components
pc1<-pca_test$x[1:18,1]
pc2<-pca_test$x[1:18,2]
pc3<-pca_test$x[1:18,3]
#class(pc1)
data_pca<-cbind(data5,pc1, pc2, pc3)
#View(OC_COHO_SharpeRatio_CV)
data_pca2<-merge(metrics, data_pca, by.x="pops_names", by.y="CohoDataSummary$Population")
write.csv(data_pca2, "PCA_metrics_scores_031721.csv")
# grab principal component scores for significant components
pc1_loadings<-pca_test$rotation[1:27,1]
pc2_loadings<-pca_test$rotation[1:27,2]
pc3_loadings<-pca_test$rotation[1:27,3]
#class(pc1)
vars1<-names(data5)
data_pca_loadings<-cbind(vars1,pc1_loadings, pc2_loadings, pc3_loadings)
#View(OC_COHO_SharpeRatio_CV)
write.csv(data_pca_loadings, "PCA_metrics_loadings_031721.csv")
#class(pc1)
vars1<-names(data5)
vars1
pc1_loadings
# grab principal component scores for significant components
pc1_loadings<-pca_test$rotation[1:27,1]
pc2_loadings<-pca_test$rotation[1:27,2]
pc3_loadings<-pca_test$rotation[1:27,3]
dim(pc3_loadings)
length(pc1_loadings)
data_pca_loadings<-cbind(vars1,pc1_loadings, pc2_loadings, pc3_loadings)
length(vars1)
View(landscape_z_df)
View(data5)
View(data_pca2)
data_pca_loadings<-cbind(data5,pc1_loadings, pc2_loadings, pc3_loadings)
vars1
length(pc3_loadings)
# grab principal component scores for significant components
pc1_loadings<-pca_test$rotation[1:28,1]
pc2_loadings<-pca_test$rotation[1:28,2]
pc3_loadings<-pca_test$rotation[1:28,3]
pc1_loadings
vars1
vars1[-1]
data_pca_loadings<-cbind(vars1[-1],pc1_loadings, pc2_loadings, pc3_loadings)
#View(OC_COHO_SharpeRatio_CV)
write.csv(data_pca_loadings, "PCA_metrics_loadings_031721_nolakes.csv")
#names(data_pca2)
CV_pca1<-cor(data_pca2$CVCurrent_LOO_V , data_pca2$pc1,method= "spearman")
CV_pca2<-cor(data_pca2$CVCurrent_LOO_V , data_pca2$pc2, method= "spearman")
CV_pca3<-cor(data_pca2$CVCurrent_LOO_V , data_pca2$pc3, method= "spearman")
digits=2
labels<-c( "PC1", "PC2","PC3")
results1<-c(CV_pca1, CV_pca2,CV_pca3)
results3<-cbind(labels, results1)
out_table<-kable(results3, digits=getOption("digits"), col.names=c("Principal component","CVcurrent"))
out_table
#names(data_pca2)
DD_pca1<-cor(data_pca2$DD , data_pca2$pc1,method= "spearman")
DD_pca2<-cor(data_pca2$DD , data_pca2$pc2, method= "spearman")
DD_pca3<-cor(data_pca2$DD , data_pca2$pc3, method= "spearman")
digits=2
labels<-c( "PC1", "PC2","PC3")
results1<-c(DD_pca1, DD_pca2,DD_pca3)
results3<-cbind(labels, results1)
out_table<-kable(results3, digits=getOption("digits"), col.names=c("Principal component","DD"))
out_table
ggplot(metrics, aes(x=pops_names, y = DD))+
geom_point()+
theme_classic()+
theme(axis.text.x  = element_text(angle=45, vjust=0.5, size=14))+
xlab(" ")
ggplot(metrics, aes(x=pops_names, y = CVCurrent_LOO_V))+
geom_point()+
theme_classic()+
theme(axis.text.x  = element_text(angle=45, vjust=0.5, size=14))+
xlab(" ")+
ylab("CV")
